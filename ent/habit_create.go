// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"habitscape/backend/ent/admin"
	"habitscape/backend/ent/completion"
	"habitscape/backend/ent/habit"
	"habitscape/backend/ent/invitation"
	"habitscape/backend/ent/post"
	"habitscape/backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HabitCreate is the builder for creating a Habit entity.
type HabitCreate struct {
	config
	mutation *HabitMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (hc *HabitCreate) SetDescription(s string) *HabitCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetFrequency sets the "frequency" field.
func (hc *HabitCreate) SetFrequency(i int) *HabitCreate {
	hc.mutation.SetFrequency(i)
	return hc
}

// SetTitle sets the "title" field.
func (hc *HabitCreate) SetTitle(s string) *HabitCreate {
	hc.mutation.SetTitle(s)
	return hc
}

// SetPhotoURL sets the "photo_url" field.
func (hc *HabitCreate) SetPhotoURL(s string) *HabitCreate {
	hc.mutation.SetPhotoURL(s)
	return hc
}

// SetDateCreated sets the "date_created" field.
func (hc *HabitCreate) SetDateCreated(t time.Time) *HabitCreate {
	hc.mutation.SetDateCreated(t)
	return hc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (hc *HabitCreate) SetNillableDateCreated(t *time.Time) *HabitCreate {
	if t != nil {
		hc.SetDateCreated(*t)
	}
	return hc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (hc *HabitCreate) AddUserIDs(ids ...int) *HabitCreate {
	hc.mutation.AddUserIDs(ids...)
	return hc
}

// AddUsers adds the "users" edges to the User entity.
func (hc *HabitCreate) AddUsers(u ...*User) *HabitCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hc.AddUserIDs(ids...)
}

// AddAdminIDs adds the "admins" edge to the Admin entity by IDs.
func (hc *HabitCreate) AddAdminIDs(ids ...int) *HabitCreate {
	hc.mutation.AddAdminIDs(ids...)
	return hc
}

// AddAdmins adds the "admins" edges to the Admin entity.
func (hc *HabitCreate) AddAdmins(a ...*Admin) *HabitCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hc.AddAdminIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (hc *HabitCreate) AddPostIDs(ids ...int) *HabitCreate {
	hc.mutation.AddPostIDs(ids...)
	return hc
}

// AddPosts adds the "posts" edges to the Post entity.
func (hc *HabitCreate) AddPosts(p ...*Post) *HabitCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hc.AddPostIDs(ids...)
}

// AddCompletionIDs adds the "completions" edge to the Completion entity by IDs.
func (hc *HabitCreate) AddCompletionIDs(ids ...int) *HabitCreate {
	hc.mutation.AddCompletionIDs(ids...)
	return hc
}

// AddCompletions adds the "completions" edges to the Completion entity.
func (hc *HabitCreate) AddCompletions(c ...*Completion) *HabitCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hc.AddCompletionIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (hc *HabitCreate) AddInvitationIDs(ids ...int) *HabitCreate {
	hc.mutation.AddInvitationIDs(ids...)
	return hc
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (hc *HabitCreate) AddInvitations(i ...*Invitation) *HabitCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hc.AddInvitationIDs(ids...)
}

// Mutation returns the HabitMutation object of the builder.
func (hc *HabitCreate) Mutation() *HabitMutation {
	return hc.mutation
}

// Save creates the Habit in the database.
func (hc *HabitCreate) Save(ctx context.Context) (*Habit, error) {
	var (
		err  error
		node *Habit
	)
	hc.defaults()
	if len(hc.hooks) == 0 {
		if err = hc.check(); err != nil {
			return nil, err
		}
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HabitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hc.check(); err != nil {
				return nil, err
			}
			hc.mutation = mutation
			if node, err = hc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			if hc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HabitCreate) SaveX(ctx context.Context) *Habit {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HabitCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HabitCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HabitCreate) defaults() {
	if _, ok := hc.mutation.DateCreated(); !ok {
		v := habit.DefaultDateCreated()
		hc.mutation.SetDateCreated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HabitCreate) check() error {
	if _, ok := hc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Habit.description"`)}
	}
	if v, ok := hc.mutation.Description(); ok {
		if err := habit.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Habit.description": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Frequency(); !ok {
		return &ValidationError{Name: "frequency", err: errors.New(`ent: missing required field "Habit.frequency"`)}
	}
	if v, ok := hc.mutation.Frequency(); ok {
		if err := habit.FrequencyValidator(v); err != nil {
			return &ValidationError{Name: "frequency", err: fmt.Errorf(`ent: validator failed for field "Habit.frequency": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Habit.title"`)}
	}
	if v, ok := hc.mutation.Title(); ok {
		if err := habit.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Habit.title": %w`, err)}
		}
	}
	if _, ok := hc.mutation.PhotoURL(); !ok {
		return &ValidationError{Name: "photo_url", err: errors.New(`ent: missing required field "Habit.photo_url"`)}
	}
	if _, ok := hc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "Habit.date_created"`)}
	}
	return nil
}

func (hc *HabitCreate) sqlSave(ctx context.Context) (*Habit, error) {
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (hc *HabitCreate) createSpec() (*Habit, *sqlgraph.CreateSpec) {
	var (
		_node = &Habit{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: habit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: habit.FieldID,
			},
		}
	)
	if value, ok := hc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: habit.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := hc.mutation.Frequency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: habit.FieldFrequency,
		})
		_node.Frequency = value
	}
	if value, ok := hc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: habit.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := hc.mutation.PhotoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: habit.FieldPhotoURL,
		})
		_node.PhotoURL = value
	}
	if value, ok := hc.mutation.DateCreated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: habit.FieldDateCreated,
		})
		_node.DateCreated = value
	}
	if nodes := hc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   habit.UsersTable,
			Columns: habit.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   habit.AdminsTable,
			Columns: []string{habit.AdminsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   habit.PostsTable,
			Columns: []string{habit.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.CompletionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   habit.CompletionsTable,
			Columns: []string{habit.CompletionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: completion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   habit.InvitationsTable,
			Columns: []string{habit.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HabitCreateBulk is the builder for creating many Habit entities in bulk.
type HabitCreateBulk struct {
	config
	builders []*HabitCreate
}

// Save creates the Habit entities in the database.
func (hcb *HabitCreateBulk) Save(ctx context.Context) ([]*Habit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Habit, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HabitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HabitCreateBulk) SaveX(ctx context.Context) []*Habit {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HabitCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HabitCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
