// Code generated by entc, DO NOT EDIT.

package habit

import (
	"time"
)

const (
	// Label holds the string label denoting the habit type in the database.
	Label = "habit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFrequency holds the string denoting the frequency field in the database.
	FieldFrequency = "frequency"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeCompletions holds the string denoting the completions edge name in mutations.
	EdgeCompletions = "completions"
	// EdgeInvitations holds the string denoting the invitations edge name in mutations.
	EdgeInvitations = "invitations"
	// Table holds the table name of the habit in the database.
	Table = "habits"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_habits"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// AdminsTable is the table that holds the admins relation/edge.
	AdminsTable = "admins"
	// AdminsInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminsInverseTable = "admins"
	// AdminsColumn is the table column denoting the admins relation/edge.
	AdminsColumn = "habit_admins"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "habit_posts"
	// CompletionsTable is the table that holds the completions relation/edge.
	CompletionsTable = "completions"
	// CompletionsInverseTable is the table name for the Completion entity.
	// It exists in this package in order to avoid circular dependency with the "completion" package.
	CompletionsInverseTable = "completions"
	// CompletionsColumn is the table column denoting the completions relation/edge.
	CompletionsColumn = "habit_completions"
	// InvitationsTable is the table that holds the invitations relation/edge.
	InvitationsTable = "invitations"
	// InvitationsInverseTable is the table name for the Invitation entity.
	// It exists in this package in order to avoid circular dependency with the "invitation" package.
	InvitationsInverseTable = "invitations"
	// InvitationsColumn is the table column denoting the invitations relation/edge.
	InvitationsColumn = "habit_invitations"
)

// Columns holds all SQL columns for habit fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldFrequency,
	FieldTitle,
	FieldPhotoURL,
	FieldDateCreated,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "habit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// FrequencyValidator is a validator for the "frequency" field. It is called by the builders before save.
	FrequencyValidator func(int) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated func() time.Time
)
