// Code generated by entc, DO NOT EDIT.

package completion

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the completion type in the database.
	Label = "completion"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldDateCompleted holds the string denoting the date_completed field in the database.
	FieldDateCompleted = "date_completed"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeHabit holds the string denoting the habit edge name in mutations.
	EdgeHabit = "habit"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the completion in the database.
	Table = "completions"
	// HabitTable is the table that holds the habit relation/edge.
	HabitTable = "completions"
	// HabitInverseTable is the table name for the Habit entity.
	// It exists in this package in order to avoid circular dependency with the "habit" package.
	HabitInverseTable = "habits"
	// HabitColumn is the table column denoting the habit relation/edge.
	HabitColumn = "habit_completions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "completions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_completions"
)

// Columns holds all SQL columns for completion fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldDateCompleted,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "completions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"habit_completions",
	"user_completions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultDateCompleted holds the default value on creation for the "date_completed" field.
	DefaultDateCompleted func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusCompleted Status = "completed"
	StatusMissed    Status = "missed"
	StatusSkipped   Status = "skipped"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCompleted, StatusMissed, StatusSkipped:
		return nil
	default:
		return fmt.Errorf("completion: invalid enum value for status field: %q", s)
	}
}
