// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// EdgeHabits holds the string denoting the habits edge name in mutations.
	EdgeHabits = "habits"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeCompletions holds the string denoting the completions edge name in mutations.
	EdgeCompletions = "completions"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeInvitations holds the string denoting the invitations edge name in mutations.
	EdgeInvitations = "invitations"
	// Table holds the table name of the user in the database.
	Table = "users"
	// HabitsTable is the table that holds the habits relation/edge. The primary key declared below.
	HabitsTable = "user_habits"
	// HabitsInverseTable is the table name for the Habit entity.
	// It exists in this package in order to avoid circular dependency with the "habit" package.
	HabitsInverseTable = "habits"
	// AdminsTable is the table that holds the admins relation/edge.
	AdminsTable = "admins"
	// AdminsInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	AdminsInverseTable = "admins"
	// AdminsColumn is the table column denoting the admins relation/edge.
	AdminsColumn = "user_admins"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "user_comments"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "user_posts"
	// CompletionsTable is the table that holds the completions relation/edge.
	CompletionsTable = "completions"
	// CompletionsInverseTable is the table name for the Completion entity.
	// It exists in this package in order to avoid circular dependency with the "completion" package.
	CompletionsInverseTable = "completions"
	// CompletionsColumn is the table column denoting the completions relation/edge.
	CompletionsColumn = "user_completions"
	// LikesTable is the table that holds the likes relation/edge.
	LikesTable = "likes"
	// LikesInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	LikesInverseTable = "likes"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "user_likes"
	// InvitationsTable is the table that holds the invitations relation/edge.
	InvitationsTable = "invitations"
	// InvitationsInverseTable is the table name for the Invitation entity.
	// It exists in this package in order to avoid circular dependency with the "invitation" package.
	InvitationsInverseTable = "invitations"
	// InvitationsColumn is the table column denoting the invitations relation/edge.
	InvitationsColumn = "user_invitations"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldBio,
	FieldEmail,
	FieldUsername,
	FieldCreatedAt,
	FieldPhotoURL,
}

var (
	// HabitsPrimaryKey and HabitsColumn2 are the table columns denoting the
	// primary key for the habits relation (M2M).
	HabitsPrimaryKey = []string{"user_id", "habit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BioValidator is a validator for the "bio" field. It is called by the builders before save.
	BioValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
