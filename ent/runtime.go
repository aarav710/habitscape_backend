// Code generated by entc, DO NOT EDIT.

package ent

import (
	"habitscape/backend/ent/comment"
	"habitscape/backend/ent/completion"
	"habitscape/backend/ent/habit"
	"habitscape/backend/ent/post"
	"habitscape/backend/ent/schema"
	"habitscape/backend/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescText is the schema descriptor for text field.
	commentDescText := commentFields[0].Descriptor()
	// comment.TextValidator is a validator for the "text" field. It is called by the builders before save.
	comment.TextValidator = func() func(string) error {
		validators := commentDescText.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(text string) error {
			for _, fn := range fns {
				if err := fn(text); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commentDescDateCreated is the schema descriptor for date_created field.
	commentDescDateCreated := commentFields[1].Descriptor()
	// comment.DefaultDateCreated holds the default value on creation for the date_created field.
	comment.DefaultDateCreated = commentDescDateCreated.Default.(func() time.Time)
	completionFields := schema.Completion{}.Fields()
	_ = completionFields
	// completionDescText is the schema descriptor for text field.
	completionDescText := completionFields[0].Descriptor()
	// completion.TextValidator is a validator for the "text" field. It is called by the builders before save.
	completion.TextValidator = func() func(string) error {
		validators := completionDescText.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(text string) error {
			for _, fn := range fns {
				if err := fn(text); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// completionDescDateCompleted is the schema descriptor for date_completed field.
	completionDescDateCompleted := completionFields[1].Descriptor()
	// completion.DefaultDateCompleted holds the default value on creation for the date_completed field.
	completion.DefaultDateCompleted = completionDescDateCompleted.Default.(func() time.Time)
	habitFields := schema.Habit{}.Fields()
	_ = habitFields
	// habitDescDescription is the schema descriptor for description field.
	habitDescDescription := habitFields[0].Descriptor()
	// habit.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	habit.DescriptionValidator = habitDescDescription.Validators[0].(func(string) error)
	// habitDescFrequency is the schema descriptor for frequency field.
	habitDescFrequency := habitFields[1].Descriptor()
	// habit.FrequencyValidator is a validator for the "frequency" field. It is called by the builders before save.
	habit.FrequencyValidator = habitDescFrequency.Validators[0].(func(int) error)
	// habitDescTitle is the schema descriptor for title field.
	habitDescTitle := habitFields[2].Descriptor()
	// habit.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	habit.TitleValidator = habitDescTitle.Validators[0].(func(string) error)
	// habitDescDateCreated is the schema descriptor for date_created field.
	habitDescDateCreated := habitFields[4].Descriptor()
	// habit.DefaultDateCreated holds the default value on creation for the date_created field.
	habit.DefaultDateCreated = habitDescDateCreated.Default.(func() time.Time)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescCaption is the schema descriptor for caption field.
	postDescCaption := postFields[1].Descriptor()
	// post.CaptionValidator is a validator for the "caption" field. It is called by the builders before save.
	post.CaptionValidator = postDescCaption.Validators[0].(func(string) error)
	// postDescDateCreated is the schema descriptor for date_created field.
	postDescDateCreated := postFields[2].Descriptor()
	// post.DefaultDateCreated holds the default value on creation for the date_created field.
	post.DefaultDateCreated = postDescDateCreated.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescBio is the schema descriptor for bio field.
	userDescBio := userFields[0].Descriptor()
	// user.BioValidator is a validator for the "bio" field. It is called by the builders before save.
	user.BioValidator = userDescBio.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
