// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"habitscape/backend/ent/habit"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Habit is the model entity for the Habit schema.
type Habit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Frequency holds the value of the "frequency" field.
	Frequency int `json:"frequency,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// PhotoURL holds the value of the "photo_url" field.
	PhotoURL string `json:"photo_url,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HabitQuery when eager-loading is set.
	Edges HabitEdges `json:"edges"`
}

// HabitEdges holds the relations/edges for other nodes in the graph.
type HabitEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Admins holds the value of the admins edge.
	Admins []*Admin `json:"admins,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// Completions holds the value of the completions edge.
	Completions []*Completion `json:"completions,omitempty"`
	// Invitations holds the value of the invitations edge.
	Invitations []*Invitation `json:"invitations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e HabitEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// AdminsOrErr returns the Admins value or an error if the edge
// was not loaded in eager-loading.
func (e HabitEdges) AdminsOrErr() ([]*Admin, error) {
	if e.loadedTypes[1] {
		return e.Admins, nil
	}
	return nil, &NotLoadedError{edge: "admins"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e HabitEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[2] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// CompletionsOrErr returns the Completions value or an error if the edge
// was not loaded in eager-loading.
func (e HabitEdges) CompletionsOrErr() ([]*Completion, error) {
	if e.loadedTypes[3] {
		return e.Completions, nil
	}
	return nil, &NotLoadedError{edge: "completions"}
}

// InvitationsOrErr returns the Invitations value or an error if the edge
// was not loaded in eager-loading.
func (e HabitEdges) InvitationsOrErr() ([]*Invitation, error) {
	if e.loadedTypes[4] {
		return e.Invitations, nil
	}
	return nil, &NotLoadedError{edge: "invitations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Habit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case habit.FieldID, habit.FieldFrequency:
			values[i] = new(sql.NullInt64)
		case habit.FieldDescription, habit.FieldTitle, habit.FieldPhotoURL:
			values[i] = new(sql.NullString)
		case habit.FieldDateCreated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Habit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Habit fields.
func (h *Habit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case habit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case habit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		case habit.FieldFrequency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frequency", values[i])
			} else if value.Valid {
				h.Frequency = int(value.Int64)
			}
		case habit.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				h.Title = value.String
			}
		case habit.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				h.PhotoURL = value.String
			}
		case habit.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				h.DateCreated = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Habit entity.
func (h *Habit) QueryUsers() *UserQuery {
	return (&HabitClient{config: h.config}).QueryUsers(h)
}

// QueryAdmins queries the "admins" edge of the Habit entity.
func (h *Habit) QueryAdmins() *AdminQuery {
	return (&HabitClient{config: h.config}).QueryAdmins(h)
}

// QueryPosts queries the "posts" edge of the Habit entity.
func (h *Habit) QueryPosts() *PostQuery {
	return (&HabitClient{config: h.config}).QueryPosts(h)
}

// QueryCompletions queries the "completions" edge of the Habit entity.
func (h *Habit) QueryCompletions() *CompletionQuery {
	return (&HabitClient{config: h.config}).QueryCompletions(h)
}

// QueryInvitations queries the "invitations" edge of the Habit entity.
func (h *Habit) QueryInvitations() *InvitationQuery {
	return (&HabitClient{config: h.config}).QueryInvitations(h)
}

// Update returns a builder for updating this Habit.
// Note that you need to call Habit.Unwrap() before calling this method if this Habit
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Habit) Update() *HabitUpdateOne {
	return (&HabitClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Habit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Habit) Unwrap() *Habit {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Habit is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Habit) String() string {
	var builder strings.Builder
	builder.WriteString("Habit(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", description=")
	builder.WriteString(h.Description)
	builder.WriteString(", frequency=")
	builder.WriteString(fmt.Sprintf("%v", h.Frequency))
	builder.WriteString(", title=")
	builder.WriteString(h.Title)
	builder.WriteString(", photo_url=")
	builder.WriteString(h.PhotoURL)
	builder.WriteString(", date_created=")
	builder.WriteString(h.DateCreated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Habits is a parsable slice of Habit.
type Habits []*Habit

func (h Habits) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
